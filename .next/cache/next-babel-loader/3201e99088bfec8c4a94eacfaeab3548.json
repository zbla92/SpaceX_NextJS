{"ast":null,"code":"import _defineProperty from \"/Users/milanblaz/Area51/SPACE_X/client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"/Users/milanblaz/Area51/SPACE_X/client/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/milanblaz/Area51/SPACE_X/client/src/pages/_app.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport App from 'next/app';\nimport '../../public/scss/global.scss';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { ApolloClient, ApolloProvider, InMemoryCache } from '@apollo/client';\nconst client = new ApolloClient({\n  uri: 'http://localhost:5000/graphql',\n  cache: new InMemoryCache()\n});\n\nfunction MyApp(_ref) {\n  let {\n    Component,\n    pageProps\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"Component\", \"pageProps\"]);\n\n  return /*#__PURE__*/_jsxDEV(ApolloProvider, {\n    client: client\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 10\n  }, this);\n} // Only uncomment this method if you have blocking data requirements for\n// every single page in your application. This disables the ability to\n// perform automatic static optimization, causing every page in your app to\n// be server-side rendered.\n//\n\n\n_c = MyApp;\n\nMyApp.getInitialProps = async appContext => {\n  // calls page's `getInitialProps` and fills `appProps.pageProps`\n  const appProps = await App.getInitialProps(appContext);\n  return _objectSpread(_objectSpread({}, appProps), {}, {\n    kita: 'kita'\n  });\n};\n\nexport default MyApp;\n\nvar _c;\n\n$RefreshReg$(_c, \"MyApp\");","map":{"version":3,"sources":["/Users/milanblaz/Area51/SPACE_X/client/src/pages/_app.js"],"names":["App","ApolloClient","ApolloProvider","InMemoryCache","client","uri","cache","MyApp","Component","pageProps","props","getInitialProps","appContext","appProps","kita"],"mappings":";;;;;;;;;AAAA,OAAOA,GAAP,MAAgB,UAAhB;AAEA,OAAO,+BAAP;AACA,OAAO,sCAAP;AACA,SAASC,YAAT,EAAuBC,cAAvB,EAAuCC,aAAvC,QAA4D,gBAA5D;AAEA,MAAMC,MAAM,GAAG,IAAIH,YAAJ,CAAiB;AAC9BI,EAAAA,GAAG,EAAE,+BADyB;AAE9BC,EAAAA,KAAK,EAAE,IAAIH,aAAJ;AAFuB,CAAjB,CAAf;;AAKA,SAASI,KAAT,OAAmD;AAAA,MAApC;AAAEC,IAAAA,SAAF;AAAaC,IAAAA;AAAb,GAAoC;AAAA,MAATC,KAAS;;AACjD,sBAAO,QAAC,cAAD;AAAgB,IAAA,MAAM,EAAEN;AAAxB;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,C,CAED;AACA;AACA;AACA;AACA;;;KARSG,K;;AASTA,KAAK,CAACI,eAAN,GAAwB,MAAOC,UAAP,IAAsB;AAC5C;AACA,QAAMC,QAAQ,GAAG,MAAMb,GAAG,CAACW,eAAJ,CAAoBC,UAApB,CAAvB;AAEA,yCAAYC,QAAZ;AAAsBC,IAAAA,IAAI,EAAE;AAA5B;AACD,CALD;;AAOA,eAAeP,KAAf","sourcesContent":["import App from 'next/app';\n\nimport '../../public/scss/global.scss';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { ApolloClient, ApolloProvider, InMemoryCache } from '@apollo/client';\n\nconst client = new ApolloClient({\n  uri: 'http://localhost:5000/graphql',\n  cache: new InMemoryCache(),\n});\n\nfunction MyApp({ Component, pageProps, ...props }) {\n  return <ApolloProvider client={client}></ApolloProvider>;\n}\n\n// Only uncomment this method if you have blocking data requirements for\n// every single page in your application. This disables the ability to\n// perform automatic static optimization, causing every page in your app to\n// be server-side rendered.\n//\nMyApp.getInitialProps = async (appContext) => {\n  // calls page's `getInitialProps` and fills `appProps.pageProps`\n  const appProps = await App.getInitialProps(appContext);\n\n  return { ...appProps, kita: 'kita' };\n};\n\nexport default MyApp;\n"]},"metadata":{},"sourceType":"module"}