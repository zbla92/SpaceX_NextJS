{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/milanblaz/Area51/SPACE_X/client/src/pages/launches/[flight_id]/index.js\";\nimport React from 'react';\nimport MainLayout from '../../../layouts/MainLayout';\nimport { ApolloClient, ApolloProvider, gql, InMemoryCache } from '@apollo/client';\nconst client = new ApolloClient({\n  uri: 'http://localhost:5000/graphql',\n  cache: new InMemoryCache()\n});\nexport default function LaunchPage() {\n  return /*#__PURE__*/_jsxDEV(MainLayout, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Launch\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this);\n}\nexport async function getServerSideProps(context) {\n  const {\n    store,\n    query,\n    req\n  } = context;\n  const {\n    data,\n    errors\n  } = await client.query({\n    query: gql`\n      query LaunchQuery {\n        launches {\n          id\n          flight_number\n          name\n          success\n          upcoming\n          date_unix\n        }\n      }\n    `\n  });\n  console.log(data);\n  return {\n    props: {\n      data\n    } // will be passed to the page component as props\n\n  };\n}","map":{"version":3,"sources":["/Users/milanblaz/Area51/SPACE_X/client/src/pages/launches/[flight_id]/index.js"],"names":["React","MainLayout","ApolloClient","ApolloProvider","gql","InMemoryCache","client","uri","cache","LaunchPage","getServerSideProps","context","store","query","req","data","errors","console","log","props"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,6BAAvB;AAEA,SACEC,YADF,EAEEC,cAFF,EAGEC,GAHF,EAIEC,aAJF,QAKO,gBALP;AAOA,MAAMC,MAAM,GAAG,IAAIJ,YAAJ,CAAiB;AAC9BK,EAAAA,GAAG,EAAE,+BADyB;AAE9BC,EAAAA,KAAK,EAAE,IAAIH,aAAJ;AAFuB,CAAjB,CAAf;AAKA,eAAe,SAASI,UAAT,GAAsB;AACnC,sBACE,QAAC,UAAD;AAAA,2BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;AAED,OAAO,eAAeC,kBAAf,CAAkCC,OAAlC,EAA2C;AAChD,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA,KAAT;AAAgBC,IAAAA;AAAhB,MAAwBH,OAA9B;AAEA,QAAM;AAAEI,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAmB,MAAMV,MAAM,CAACO,KAAP,CAAa;AAC1CA,IAAAA,KAAK,EAAET,GAAI;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZ8C,GAAb,CAA/B;AAeAa,EAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AAEA,SAAO;AACLI,IAAAA,KAAK,EAAE;AAAEJ,MAAAA;AAAF,KADF,CACY;;AADZ,GAAP;AAGD","sourcesContent":["import React from 'react';\nimport MainLayout from '../../../layouts/MainLayout';\n\nimport {\n  ApolloClient,\n  ApolloProvider,\n  gql,\n  InMemoryCache,\n} from '@apollo/client';\n\nconst client = new ApolloClient({\n  uri: 'http://localhost:5000/graphql',\n  cache: new InMemoryCache(),\n});\n\nexport default function LaunchPage() {\n  return (\n    <MainLayout>\n      <div>Launch</div>\n    </MainLayout>\n  );\n}\n\nexport async function getServerSideProps(context) {\n  const { store, query, req } = context;\n\n  const { data, errors } = await client.query({\n    query: gql`\n      query LaunchQuery {\n        launches {\n          id\n          flight_number\n          name\n          success\n          upcoming\n          date_unix\n        }\n      }\n    `,\n  });\n\n  console.log(data);\n\n  return {\n    props: { data }, // will be passed to the page component as props\n  };\n}\n"]},"metadata":{},"sourceType":"module"}